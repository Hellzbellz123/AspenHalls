[workspace]
resolver = "2"
default-members = ["crates/aspenlib", "crates/desktop"]
members = ["crates/aspenlib", "crates/desktop", "crates/mobile", "crates/wasm"]
exclude = ["deps"]

[workspace.lints.rust]
missing-docs = { level = "deny" }

[workspace.lints.clippy]
### warned lints ###
too-many-lines = "warn"
missing_errors_doc = "warn"
missing_panics_doc = "warn"
missing_safety_doc = "warn"

### denied lints ###
missing_docs_in_private_items = { level = "deny" }
correctness = { level = "deny", priority = -1 }
suspicious = { level = "deny", priority = -1 }
complexity = { level = "deny", priority = -1 }
perf = { level = "deny", priority = -1 }
style = { level = "deny", priority = -1 }
pedantic = { level = "deny", priority = -1 }
nursery = { level = "deny", priority = -1 }
cargo = { level = "deny", priority = -1 }

### allowed lints from clippy pedantic ###
multiple-crate-versions = { level = "allow" }
needless_pass_by_value = { level = "allow" }
module_name_repetitions = { level = "allow" }
wildcard_imports = { level = "allow" }
cast_possible_truncation = { level = "allow" }
cast_precision_loss = { level = "allow" }
cast-sign-loss = { level = "allow" }
cast_possible_wrap = { level = "allow" }

# Enable high optimizations for dependencies (incl. Bevy), but not for our code:
[profile.dev.package."*"]
codegen-units = 32
incremental = false
opt-level = 1

# Enable a small amount of optimization in debug mode
[profile.dev]
codegen-units = 256
opt-level = 1
incremental = true
lto = "off"

[profile.release]
debug = true
codegen-units = 1
opt-level = 'z'
lto = "fat"

# broken dependencies
[patch.crates-io]
typid = { git = "https://github.com/hellzbellz123/typid" }
# bevy addon local replacements ###
# Patching local bevy crates does not usually make them work
# Cargo will use both versions of bevy so the patches usually
# just break compiling if dependencies use different
# bevy versions
bevy_ecs_tilemap = { path = "deps/bevy_ecs_tilemap" }
bevy_egui = { path = "deps/bevy_egui" }
bevy_common_assets = { path = "deps/bevy_common_assets" }
bevy_ecs_ldtk_macros = { path = "deps/bevy_ecs_ldtk/macros" }
bevy_dylib = { path = "deps/bevy/crates/bevy_dylib" }

# Replace bevy core crates with local copy for ALL crates that use them ###
bevy = { workspace = true, path = "deps/bevy" }
bevy_a11y = { path = "deps/bevy/crates/bevy_a11y" }
bevy_app = { path = "deps/bevy/crates/bevy_app" }
bevy_asset = { path = "deps/bevy/crates/bevy_asset" }
bevy_core = { path = "deps/bevy/crates/bevy_core" }
bevy_core_pipeline = { path = "deps/bevy/crates/bevy_core_pipeline" }
bevy_derive = { path = "deps/bevy/crates/bevy_derive" }
bevy_diagnostic = { path = "deps/bevy/crates/bevy_diagnostic" }
bevy_ecs = { path = "deps/bevy/crates/bevy_ecs" }
bevy_encase_derive = { path = "deps/bevy/crates/bevy_encase_derive" }
bevy_reflect = { path = "deps/bevy/crates/bevy_reflect" }
bevy_reflect_derive = { path = "deps/bevy/crates/bevy_reflect/bevy_reflect_derive" }
bevy_gilrs = { path = "deps/bevy/crates/bevy_gilrs" }
bevy_gizmos = { path = "deps/bevy/crates/bevy_gizmos" }
bevy_hierarchy = { path = "deps/bevy/crates/bevy_hierarchy" }
bevy_input = { path = "deps/bevy/crates/bevy_input" }
bevy_internal = { path = "deps/bevy/crates/bevy_internal" }
bevy_log = { path = "deps/bevy/crates/bevy_log" }
bevy_macro_utils = { path = "deps/bevy/crates/bevy_macro_utils" }
bevy_math = { path = "deps/bevy/crates/bevy_math" }
bevy_mikktspace = { path = "deps/bevy/crates/bevy_mikktspace" }
bevy_pbr = { path = "deps/bevy/crates/bevy_pbr" }
bevy_ptr = { path = "deps/bevy/crates/bevy_ptr" }
bevy_render = { path = "deps/bevy/crates/bevy_render" }
bevy_scene = { path = "deps/bevy/crates/bevy_scene" }
bevy_sprite = { path = "deps/bevy/crates/bevy_sprite" }
bevy_tasks = { path = "deps/bevy/crates/bevy_tasks" }
bevy_text = { path = "deps/bevy/crates/bevy_text" }
bevy_time = { path = "deps/bevy/crates/bevy_time" }
bevy_transform = { path = "deps/bevy/crates/bevy_transform" }
bevy_ui = { path = "deps/bevy/crates/bevy_ui" }
bevy_utils = { path = "deps/bevy/crates/bevy_utils" }
bevy_window = { path = "deps/bevy/crates/bevy_window" }
bevy_winit = { path = "deps/bevy/crates/bevy_winit" }
bevy_animation = { path = "deps/bevy/crates/bevy_animation" }
bevy_audio = { path = "deps/bevy/crates/bevy_audio" }
bevy_gltf = { path = "deps/bevy/crates/bevy_gltf" }
bevy_dynamic_plugin = { path = "deps/bevy/crates/bevy_dynamic_plugin" }


# TODO: move the virtual touchpad into a reuseable bevy plugin
# so other people can just throw it in and use it
# bevy_mod_mobiletouchpad = { path = "deps_inhouse/bevy_mod_mobile_touchpad" }

# Unused dependencies #######
# bevy_kira_audio = { path = "deps/bevy_kira_audio", default-features = false, features = [
#   "ogg",
# ] }
# belly = { path = "deps/belly" }
# bevy_tiling_background = { path = "deps/bevy_tiling_background" }
# bevy_mouse_tracking_plugin = { path = "deps/bevy_mouse_tracking"}
# iyes_progress = {path = "deps/iyes_progress"}
# bevy_sprite3d = {path = "deps/bevy_sprite3d"}
# bevy_eventlistener = {path = "deps/bevy_eventlistener"}
# bevy_mod_picking = {path = "deps/bevy_mod_picking", default-features = false, features = [
#     "all"
# ]}
# bevy_tweening = {path = "deps/bevy_tweening", default-features = false, features = [
#     "bevy_text",
# ]}

### unused patches atm ###
# iyes_progress = {path = "deps/iyes_progress"}
