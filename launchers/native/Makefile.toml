extend = "../../Makefile.toml"

[tasks.build-release]
private = true
workspace = false
run_task = { name = [
  "build-release-linux",
  "build-release-windows",
] }

[tasks.cp_artifacts_release]
private = true
workspace = false
run_task = { name = [
  "copy_assets",
  "copy_bin_windows",
  "copy_bin_linux",
] }

[tasks.copy_assets]
private = true
workspace = false
script_runner = "@shell"
script.pre = "cp -r ../../assets ../../package/native/assets"

[tasks.copy_bin_windows]
script_runner = "@shell"
script.pre = "echo 'copying windows binary'"
script.main = "cp ../../target/x86_64-pc-windows-msvc/release/aspen_halls_native.exe ../../package/native/"

[tasks.copy_bin_linux]
script_runner = "@shell"
script.pre = "echo 'copying linux binary'"
script.main = "cp ../../target/x86_64-unknown-linux-gnu/release/aspen_halls_native ../../package/native/ "

[tasks.build-release-linux]
private = true
workspace = false
env_files = ["../../.env"]
command = "cargo"
args = [
  "build",
  "--release",
  "--target=x86_64-unknown-linux-gnu ",
]

[tasks.build-release-windows]
private = true
workspace = false
# this env fixes Blake3 cross compilation.
env = { "CARGO_FEATURE_PURE" = "1" }
env_files = ["../../.env"]
command = "cargo"
args = [
  "xwin",
  "build",
  "--release",
  "--target=x86_64-pc-windows-msvc",
]

[tasks.run-develop]
private = true
command = "cargo"
args = ["run", "--features", "develop, dynamic"]

[tasks.refresh-assets]
private = true
script_runner = "@shell"
script.pre = "rm -rf ./assets && cp -r ../../assets ./assets"

# stupid aliases too make my brain happy
# didnt look at the docs long enough too
# see if this functionality is inluded
# the docs are hard to comprehend.
[tasks.watchsrc]
private = true
env_files = ["../../.env"]
watch.watch = [
  "../../src",
  "../../Cargo.toml",
  "src",
  "Cargo.toml",
]
run_task = "run-develop"

[tasks.brnative]
run_task = "build-release-native"

[tasks.rdnative]
private = true
run_task = { name = [
  "refresh-assets",
  "run-develop",
], parallel = true }

[tasks.RDNative]
description = "RDNative: Run Aspen Halls in Development mode - Native"
run_task = "rdnative"

[tasks.WatchSrc]
description = "WatchSrc: starts Aspen Halls and runs RunDevelop if Source files change"
run_task = "watchsrc"

[tasks.BRNative]
description = "BRNative: Build Native targets and copy binarys too package/native directory"
run_task = "brnative"

# [tasks.run-release]
# private = true
# command = "cargo"
# args = ["run", "--release"]

# [tasks.rrnative]
# description = "RRNative: Run Aspen Halls in release mode - Native"
# run_task = { name = [
#   "update-assets",
#   "run-release",
# ], parallel = true }

# [tasks.RRNative]
# run_task = "rrnative"
# private = true

# TODO: fix this broken target
# not sure what that entails, probably a container
# [tasks.build-release-macos]
# env_files = ["../../.env"]
# command = "cargo"
# args = [
#   "build",
#   "--release",
#   "--target=x86_64-apple-darwin ",
# ]


# dont use this until some logic is implemented too properly handle git repository status
# if there is changes too the assets folder/src this function should exit with an error message
# [tasks.edit_assets]
# env_files = ["../../.env"]
# script_runner = "@shell"
# script.pre = "rm -rf ../../assets_old/*"
# script.main = "cargo run --features develop"
# script.post = "mv ../../assets/* ../../assets_old/ && cp -r ./assets/* ../../assets/"
