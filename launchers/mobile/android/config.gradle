ext.versions = [
    androidGradlePlugin: '8.1.2',
    compileSdk         : 33,
    minSdk             : 26,
    targetSdk          : 31,
    buildTools         : "34.0.0",
    kotlinVersion      : "1.6.21",
    fragmentVersion    : "1.3.6",
    appcompatVersion   : "1.4.0",
    nexusPublishVersion: "1.1.0",
    javaVersion        : 17,
    ndkVersion         : "26.1.10909125"
]

ext.libraries = [
    androidGradlePlugin: "com.android.tools.build:gradle:$versions.androidGradlePlugin",
    kotlinGradlePlugin : "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlinVersion",
    kotlinStdLib       : "org.jetbrains.kotlin:kotlin-stdlib:$versions.kotlinVersion",
    androidxFragment   : "androidx.fragment:fragment:$versions.fragmentVersion",
    androidxAppcompat  : "androidx.appcompat:appcompat:$versions.appcompatVersion",
]

// Project export values

/**
 * Parse the project properties for the 'custom_build_mode' property and return
 * it for turning on custom build mode.
 */
ext.getCustomBuildMode = { ->
    // Retrieve the custom_build_mode from the project property set by the Crossbow build command.
    return project.hasProperty("custom_build_mode") ? project.property("custom_build_mode") : false
}

ext.getExportPackageName = { ->
    // Retrieve the app id from the project property set by the Crossbow build command.
    String appId = project.hasProperty("export_package_name") ? project.property("export_package_name") : ""
    // Check if the app id is valid, otherwise use the default.
    if (appId == null || appId.isEmpty()) {
        appId = "com.hellzbellz123.aspen_halls"
    }
    return appId
}

ext.getExportMinSdkVersion = { ->
    String minSdkVersion = project.hasProperty("export_version_min_sdk") ? project.property("export_version_min_sdk") : ""
    if (minSdkVersion == null || minSdkVersion.isEmpty()) {
        minSdkVersion = "$versions.minSdk"
    }
    try {
        return Integer.parseInt(minSdkVersion)
    } catch (NumberFormatException ignored) {
        return versions.minSdk
    }
}

ext.getExportTargetSdkVersion = { ->
    String targetSdkVersion = project.hasProperty("export_version_target_sdk") ? project.property("export_version_target_sdk") : ""
    if (targetSdkVersion == null || targetSdkVersion.isEmpty()) {
        targetSdkVersion = "$versions.targetSdk"
    }
    try {
        return Integer.parseInt(targetSdkVersion)
    } catch (NumberFormatException ignored) {
        return versions.targetSdk
    }
}
