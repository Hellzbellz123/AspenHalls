buildscript {
    apply from: "config.gradle"
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath libraries.androidGradlePlugin
        classpath libraries.kotlinGradlePlugin
        classpath "org.mozilla.rust-android-gradle:plugin:0.9.3"
    }
}

plugins {
    id "org.mozilla.rust-android-gradle.rust-android" version "0.9.3"
}

apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply from: "config.gradle"

dependencies {
    implementation libraries.kotlinStdLib
    implementation "androidx.appcompat:appcompat:1.6.1"
    implementation group: 'io.github.astonbitecode', name: 'j4rs', version: '0.17.1'
}

android {
    namespace getExportPackageName()
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools
    ndkVersion versions.ndkVersion
    
    compileOptions {
        sourceCompatibility versions.javaVersion
        targetCompatibility versions.javaVersion
    }

    kotlinOptions {
        jvmTarget = versions.javaVersion
    }

    def versionPropsFile = file('version.properties')

    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        defaultConfig {
            // The default ignore pattern for the "assets" directory includes hidden files and directories which are used by Crossbow projects.
            aaptOptions {
                ignoreAssetsPattern "!.svn:!.git:!.gitignore:!.ds_store:!*.scc:<dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"
            }

            def versionMajor = versionProps['VERSION_MAJOR'].toInteger()
            def versionMinor = versionProps['VERSION_MINOR'].toInteger()
            def versionPatch = versionProps['VERSION_PATCH'].toInteger()

            // Feel free to modify the application id to your own.
            applicationId getExportPackageName()
            versionCode versionMajor * 10000 + versionMinor * 100 + versionPatch
            versionName "${versionMajor}.${versionMinor}.${versionPatch}"
            minSdkVersion getExportMinSdkVersion()
            targetSdkVersion getExportTargetSdkVersion()

            missingDimensionStrategy "products", "template"
        }
    }
    else {
        throw new GradleException("Could not read version.properties!")
    }


    sourceSets {
        main {
            manifest.srcFile "AndroidManifest.xml"
            java.srcDirs = ["src"]
            assets.srcDirs = ["../../../assets"]
            res.srcDirs = ["../../../res/android"]
        }
    }
    lint {
        abortOnError false
        disable 'MissingTranslation', 'UnusedResources'
    }
}

apply plugin: "org.mozilla.rust-android-gradle.rust-android"

cargo {
    module  = "../"
    libname = "game"
    rustupChannel = "nightly-2023-11-20"
    targetDirectory = "../../../target"
    extraCargoBuildArguments = ['-Zbuild-std']
    if (project.gradle.startParameter.taskNames.any { it.toLowerCase().contains('release') }) {
        profile = "release"
        targets = [
            "arm",
            "arm64",
            // "x86",
            // "x86_64"
        ]
    } else {
        profile = "debug"
        targets = [
            "arm64",
        ]
    }
}

//
//
// Automate copy std libc
//
//

import org.apache.tools.ant.taskdefs.condition.Os

tasks.configureEach { task ->
    if (task.name == 'mergeDebugJniLibFolders' || task.name == 'mergeReleaseJniLibFolders') {
        task.dependsOn 'cargoBuild'
    }
    for (target in cargo.targets) {
        if (task.name == "cargoBuild${target.capitalize()}") {
            task.dependsOn "copy_libc++_shared${target.capitalize()}"
        }
    }
}

for (target in cargo.targets) {
      tasks.register("copy_libc++_shared${target.capitalize()}", Copy) {
        def ndkDir = android.ndkDirectory
        def hostTag
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            if (Os.isArch("x86_64") || Os.isArch("amd64")) {
                hostTag = "windows-x86_64"
            } else {
                hostTag = "windows"
            }
        } else if (Os.isFamily(Os.FAMILY_MAC)) {
            hostTag = "darwin-x86_64"
        } else {
            hostTag = "linux-x86_64"
        }

        def (abi, archTriple) = [
            arm: ['armeabi-v7a', 'arm-linux-androideabi'],
            arm64: ['arm64-v8a', 'aarch64-linux-android'],
            x86: ['x86', 'i686-linux-android'],
            x86_64: ['x86_64', 'x86_64-linux-android'],
        ][target]

        def from_path = "$ndkDir/toolchains/llvm/prebuilt/$hostTag/sysroot/usr/lib/$archTriple/libc++_shared.so"
        def into_path = layout.buildDirectory.dir("rustJniLibs/android/$abi")

        assert file(from_path).exists()

        from from_path
        into into_path
    }
}
